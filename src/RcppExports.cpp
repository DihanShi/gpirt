// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// gpirtMCMC
Rcpp::List gpirtMCMC(const arma::imat& y, const int sample_iterations, const int burn_iterations, const double sf, const double ell);
RcppExport SEXP _gpirt_gpirtMCMC(SEXP ySEXP, SEXP sample_iterationsSEXP, SEXP burn_iterationsSEXP, SEXP sfSEXP, SEXP ellSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int >::type sample_iterations(sample_iterationsSEXP);
    Rcpp::traits::input_parameter< const int >::type burn_iterations(burn_iterationsSEXP);
    Rcpp::traits::input_parameter< const double >::type sf(sfSEXP);
    Rcpp::traits::input_parameter< const double >::type ell(ellSEXP);
    rcpp_result_gen = Rcpp::wrap(gpirtMCMC(y, sample_iterations, burn_iterations, sf, ell));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gpirt_gpirtMCMC", (DL_FUNC) &_gpirt_gpirtMCMC, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_gpirt(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
